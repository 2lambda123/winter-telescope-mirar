import numpy as np
from astropy.io.fits import Header
from pathlib import Path
import logging

from winterdrp.data.base_data import Data, DataBatch
from winterdrp.errors import ProcessorError
from winterdrp.paths import raw_img_key, base_name_key, ref_img_key

logger = logging.getLogger(__name__)


class MissingReferenceError(ProcessorError, KeyError):
    pass


class Image(Data):

    def __init__(
            self,
            data: np.ndarray,
            header: Header,
    ):

        self._data = data
        self._header = header
        self.raw_img_list = self[raw_img_key].split(",")
        self.base_name = self[base_name_key]

    def __str__(self):
        return f"This is an {self.__class__.__name__} object, " \
               f"built from {self.get_name()}"

    def get_data(self) -> np.ndarray:
        return self._data

    def set_data(self, data: np.ndarray):
        self._data = data

    def get_header(self) -> Header:
        return self._header

    def get_name(self) -> str:
        return self.base_name

    def get_raw_img_list(self) -> str:
        return self.raw_img_list

    def __getitem__(self, item):
        return self._header.__getitem__(item)

    def __setitem__(self, key, value):
        self._header.__setitem__(key, value)

    def keys(self):
        return self._header.keys()

    def __add__(self, other):
        return self._data.__add__(other)

    def __sub__(self, other):
        return self._data.__sub__(other)

    def __divmod__(self, other):
        return self._data.__divmod__(other)

    def __mul__(self, other):
        return self._data.__mul__(other)


class DifferenceImage(Image):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        if ref_img_key not in self.keys():
            err = f"No reference image data found in header. " \
                  f"Please add '{ref_img_key} = /path/to/ref' to image {self.get_name()}"
            logger.error(err)
            raise MissingReferenceError(err)

        self.ref_img_path = Path(self[ref_img_key])
        self.ref_img_name = self.ref_img_path.name

    def get_ref_name(self) -> str:
        return self.ref_img_name

    def __str__(self):
        return f"This is an {self.__class__.__name__} object, " \
               f"generated by subtracting {self.get_name()} from {self.get_ref_name()}"


class ImageBatch(DataBatch):

    def append(self, data: Image):
        self._batch.append(data)

    def get_batch(self) -> list[Image]:
        return self._batch
