import numpy as np
from astropy.io.fits import Header
import logging

from winterdrp.data.base_data import DataBlock, DataBatch
from winterdrp.errors import ProcessorError

logger = logging.getLogger(__name__)


class MissingReferenceError(ProcessorError, KeyError):
    pass


class Image(DataBlock):

    def __init__(self, data: np.ndarray, header: Header):
        self.data = data
        self.header = header
        super().__init__()

    def __str__(self):
        return f"<An {self.__class__.__name__} object, " \
               f"built from {self.get_name()}>"

    def get_data(self) -> np.ndarray:
        return self.data

    def set_data(self, data: np.ndarray):
        self.data = data

    def get_header(self) -> Header:
        return self.header

    def set_header(self, header: Header):
        self.header = header

    def __getitem__(self, item):
        return self.header.__getitem__(item)

    def __setitem__(self, key, value):
        self.header.__setitem__(key, value)

    def keys(self):
        return self.header.keys()


# class DifferenceImage(Image):
#
#     def __init__(self, *args, **kwargs):
#         super().__init__(*args, **kwargs)
#
#         if ref_img_key not in self.keys():
#             err = f"No reference image data found in header. " \
#                   f"Please add '{ref_img_key} = /path/to/ref' to image {self.get_name()}"
#             logger.error(err)
#             raise MissingReferenceError(err)
#
#         self.ref_img_path = Path(self[ref_img_key])
#         self.ref_img_name = self.ref_img_path.name
#
#     def get_ref_name(self) -> str:
#         return self.ref_img_name
#
#     def __str__(self):
#         return f"<An {self.__class__.__name__} object, " \
#                f"generated by subtracting {self.get_name()} from {self.get_ref_name()}>"


class ImageBatch(DataBatch):

    data_type = Image

    def __init__(self, batch: list[Image] | Image = None):
        super().__init__(batch=batch)

    def append(self, data: Image):
        self._append(data)

    def __str__(self):
        return f"<An {self.__class__.__name__} object, containing {[x.get_name() for x in self.get_batch()]}>"

    def get_batch(self) -> list[Image]:
        return self.get_data_list()
