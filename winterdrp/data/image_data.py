import numpy as np
from astropy.io.fits import Header
from pathlib import Path

from winterdrp.data.base_data import Data, DataBatch
from winterdrp.errors import ProcessorError
from winterdrp.paths import raw_img_key, base_name_key, ref_img_key


class MissingReferenceError(ProcessorError, KeyError):
    pass


class Image(Data):

    def __init__(
            self,
            data: np.ndarray,
            header: Header,
    ):

        self._data = data
        self._header = header
        self.raw_img_path = Path(self[raw_img_key])
        self.base_name = self[base_name_key]

    def __str__(self):
        return f"This is an {self.__class__} object, of {self.base_name} (loaded from {self.raw_img_path})"

    def get_data(self) -> np.ndarray:
        return self._data

    def set_data(self, data: np.ndarray):
        self._data = data

    def get_header(self) -> Header:
        return self._header

    def __getitem__(self, item):
        return self._header.__getitem__(item)

    def __setitem__(self, key, value):
        self._header.__setitem__(key, value)

    def keys(self):
        return self._header.keys()


class DifferenceImage(Image):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        if ref_img_key not in self.keys()

        self.ref_img_path = Path(self[ref_img_key])
        self.ref_img_name = self.ref_img_path.name

    def __str__(self):
        return f"This is an {self.__class__} object, " \
               f"generated by subtracting {self.base_name} from {self.ref_img_name}"

class ImageBatch(DataBatch):

    def append(self, data: Image):
        self._batch.append(data)

    def get_batch(self) -> list[Image]:
        return self._batch
