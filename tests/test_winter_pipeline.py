"""
Tests for WINTER reduction
"""
import logging
import shutil

from mirar.data import Dataset, ImageBatch
from mirar.paths import get_output_dir
from mirar.pipelines import get_pipeline
from mirar.testing import BaseTestCase

logger = logging.getLogger(__name__)

expected_zp = {
    "ZP_2.0": 24.004793167114258,
    "ZP_2.0_std": 0.046376824378967285,
    "ZP_2.0_nstars": 55,
    "ZP_3.0": 24.535335540771484,
    "ZP_3.0_std": 0.03816154599189758,
    "ZP_3.0_nstars": 51,
    "ZP_4.0": 24.716201782226562,
    "ZP_4.0_std": 0.04618291184306145,
    "ZP_4.0_nstars": 53,
    "ZP_5.0": 24.778196334838867,
    "ZP_5.0_std": 0.04734010249376297,
    "ZP_5.0_nstars": 54,
    "ZP_6.0": 24.82450294494629,
    "ZP_6.0_std": 0.0532773993909359,
    "ZP_6.0_nstars": 57,
    "ZP_7.0": 24.814254760742188,
    "ZP_7.0_std": 0.047826092690229416,
    "ZP_7.0_nstars": 53,
    "ZP_8.0": 24.85060691833496,
    "ZP_8.0_std": 0.055966123938560486,
    "ZP_8.0_nstars": 57,
    "ZP_AUTO": 24.870363235473633,
    "ZP_AUTO_std": 0.04606800898909569,
    "ZP_AUTO_nstars": 53,
    "ZP_PSF": 24.73204231262207,
    "ZP_PSF_std": 0.04717683047056198,
    "ZP_PSF_nstars": 61,
    "SCORMEAN": -0.06111560906579194,
    "SCORMED": -0.060218534283411125,
    "SCORSTD": 1.269918994420582,
}
expected_dataframe_values = {
    "magpsf": [
        17.264255436069227,
        16.994468209047668,
        17.013485398011312,
        17.012513083290028,
        15.951323831482462,
        16.71543019312683,
        17.20606252068104,
        17.104966156172807,
        16.63931361659551,
        13.659341166215231,
        14.56505058374177,
        17.123752167130455,
        16.752297285089714,
        16.791047704965543,
        15.44967914345907,
        16.706764820743025,
        16.903987280178118,
        14.375534702398586,
        17.082632325257293,
        16.182668511157505,
        16.929120516307755,
        17.038175022188632,
        17.04776187421905,
        16.524222261542,
        17.149348049572005,
        14.668550290503813,
        16.486774012810645,
        13.872986428738187,
        16.885854830728626,
        17.184188929187755,
        16.98899633868819,
        16.78382853505614,
        17.12855876273084,
        17.050785554732897,
        15.039644652634566,
        16.654254986002137,
        16.325025232281483,
        16.03943163827927,
        14.170677624597019,
        16.805163053072157,
        16.666979581073058,
        16.628780877383072,
        16.598355059357022,
        16.658986574421387,
        16.822411247116307,
        16.992866747332005,
        16.367310058230288,
        17.232558947825048,
        15.724641725836387,
        16.561402679549154,
        16.781471330623383,
        17.038465048171687,
        16.90530789685607,
        16.326343167935942,
        16.713944447998756,
        14.185056933145793,
        17.15298295359079,
        17.02208471286948,
        16.278309080407993,
        16.51938790387217,
        17.208551891784957,
        14.615762262793037,
        17.069267533064284,
        16.329424155606002,
        17.074591909872904,
        17.08344014691732,
        16.901379382742473,
        13.980940644039068,
        17.039672682404436,
        17.064666943200404,
        17.124730561942975,
        16.89623927344832,
        17.275033542746986,
        16.386213221325,
        16.317141179801,
        16.285064501266156,
        15.696410203974427,
        15.204018152256511,
        16.39560141223573,
        17.038959068812503,
        16.785481597287564,
        17.17394422602651,
        16.98500136829921,
        17.22483928774308,
        16.868463375559156,
        17.174763640253644,
        17.25783673940234,
        16.601810255137462,
        16.26510215108062,
        17.13508688762294,
        16.720981849654333,
        17.16499317617376,
    ],
    "magap": [
        15.708112267513604,
        17.94873329905299,
        16.70259866523341,
        15.653483012715252,
        15.57642799286609,
        15.120019235655837,
        16.35528649537175,
        16.692392895311173,
        15.477829857467452,
        14.136223879530693,
        14.501777094279394,
        16.131877600470556,
        16.817910182423446,
        17.619163717060307,
        14.297123798648308,
        15.28478616593036,
        15.830317981195027,
        14.075614461685829,
        15.662049190026284,
        15.025951252962322,
        16.07407201924861,
        15.937116724707707,
        15.811208589691503,
        16.025147000116217,
        15.857768101059293,
        14.467608384222274,
        16.044510014479574,
        12.975100966715999,
        16.062946448477874,
        15.991727914493605,
        15.858661077355299,
        16.419948665067118,
        15.955811353506077,
        16.285404161157736,
        14.496276733161574,
        15.376611082226699,
        15.273062712683242,
        14.794961972380966,
        15.013136253856906,
        15.58415419595952,
        16.44797131404301,
        15.51934275585631,
        15.601292493328174,
        15.16381093267216,
        16.191179296567586,
        16.011596214960882,
        17.033126904291496,
        18.065622122473634,
        14.746587606830792,
        15.181892087191008,
        15.5208990082045,
        16.93301895241714,
        16.105357099814846,
        16.288273034014033,
        15.76625516320004,
        13.863500284943683,
        15.734549848903745,
        17.04974278964773,
        15.349453356119428,
        17.09077180811016,
        17.743335289648567,
        14.62948876288028,
        15.940931393311333,
        17.222632607381485,
        15.56922487666584,
        16.556897793849636,
        15.59375004000471,
        14.217419827542225,
        16.89526465844583,
        16.637443268201228,
        17.184905969302925,
        15.842998917779228,
        17.178609140800685,
        16.302657901177334,
        14.901376880147225,
        14.849790377738701,
        16.426886146029965,
        14.143800986538796,
        15.496733209698846,
        15.968791110443762,
        15.850763789085525,
        16.02667413254209,
        15.780462940783757,
        16.815823166633926,
        16.62998650369554,
        17.454788610407196,
        17.77715188273481,
        15.873766155210657,
        14.675518404907294,
        16.108165180890236,
        15.938866385156167,
        16.23469455853326,
    ],
}

pipeline = get_pipeline(
    instrument="winter", selected_configurations=["test"], night="20230726"
)

logging.basicConfig(level=logging.DEBUG)


# @unittest.skip(
#     "WFAU is down"
# )
class TestWinterPipeline(BaseTestCase):
    """
    Module for testing winter pipeline
    """

    def setUp(self):
        """
        Function to set up test
        Returns:

        """
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

    def test_pipeline(self):
        """
        Test winter pipeline
        Returns:

        """
        self.logger.info("\n\n Testing winter pipeline \n\n")

        res, _ = pipeline.reduce_images(Dataset([ImageBatch()]), catch_all_errors=False)

        # Cleanup - delete ouptut dir
        output_dir = get_output_dir(dir_root="winter/20230726")
        shutil.rmtree(output_dir)

        # Expect one dataset, for one different sub-boards
        self.assertEqual(len(res[0]), 1)

        source_table = res[0][0]

        # # Uncomment to print new expected ZP dict
        print("New Results WINTER:")
        new_exp = "expected_zp = { \n"
        for header_key in source_table.get_metadata():
            if header_key in expected_zp:
                new_exp += f'    "{header_key}": {source_table[header_key]}, \n'
        new_exp += "}"
        print(new_exp)

        new_candidates_table = source_table.get_data()

        new_exp_dataframe = "expected_dataframe_values = { \n"
        for key in expected_dataframe_values:
            new_exp_dataframe += f'    "{key}": {list(new_candidates_table[key])}, \n'
        new_exp_dataframe += "}"

        print(new_exp_dataframe)

        for key, value in expected_zp.items():
            if isinstance(value, float):
                self.assertAlmostEqual(value, source_table[key], places=2)
            elif isinstance(value, int):
                self.assertEqual(value, source_table[key])
            else:
                raise TypeError(
                    f"Type for value ({type(value)} is neither float not int."
                )

        candidates_table = source_table.get_data()

        self.assertEqual(len(candidates_table), 92)
        for key, value in expected_dataframe_values.items():
            if isinstance(value, list):
                for ind, val in enumerate(value):
                    self.assertAlmostEqual(
                        candidates_table.iloc[ind][key], val, delta=0.05
                    )
