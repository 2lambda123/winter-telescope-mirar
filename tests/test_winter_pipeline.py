"""
Tests for WINTER reduction
"""

import logging
import shutil

from mirar.data import Dataset, ImageBatch
from mirar.paths import get_output_dir
from mirar.pipelines import get_pipeline
from mirar.testing import BaseTestCase

logger = logging.getLogger(__name__)

expected_zp = {
    "ZP_2.0": 23.959992146021143,
    "ZP_2.0_std": 0.04468593502379257,
    "ZP_2.0_nstars": 118,
    "ZP_3.0": 24.488647137271013,
    "ZP_3.0_std": 0.043678000162985946,
    "ZP_3.0_nstars": 118,
    "ZP_4.0": 24.67403631422544,
    "ZP_4.0_std": 0.040829710238539714,
    "ZP_4.0_nstars": 118,
    "ZP_5.0": 24.736553404147642,
    "ZP_5.0_std": 0.040354725833759444,
    "ZP_5.0_nstars": 118,
    "ZP_6.0": 24.77188170392595,
    "ZP_6.0_std": 0.039765732833753016,
    "ZP_6.0_nstars": 118,
    "ZP_7.0": 24.782397765144424,
    "ZP_7.0_std": 0.04069653155959119,
    "ZP_7.0_nstars": 118,
    "ZP_8.0": 24.799413106226112,
    "ZP_8.0_std": 0.040876147446689284,
    "ZP_8.0_nstars": 118,
    "ZP_AUTO": 24.787539557156656,
    "ZP_AUTO_std": 0.04316430194985392,
    "ZP_AUTO_nstars": 118,
    "ZP_PSF": 24.680094141593663,
    "ZP_PSF_std": 0.03875121055985624,
    "ZP_PSF_nstars": 117,
    "SCORMEAN": -0.07678255815161257,
    "SCORMED": -0.07307016879473982,
    "SCORSTD": 1.2836771224604269,
}
expected_dataframe_values = {
    "magpsf": [
        17.27350131218496,
        17.09322645828431,
        15.713888241482717,
        17.105224962013885,
        17.008938740753777,
        15.384459619262936,
        17.21898287647103,
        16.04271800524978,
        16.668565855452023,
        16.810454279339858,
        17.307242451093423,
        16.972841300543138,
        16.941287839498322,
        15.223083862034935,
        13.751437577040493,
        16.721470324891584,
        14.638107336381436,
        17.210166300948103,
        17.307626137920188,
        16.893941199130477,
        16.97220970929738,
        17.118547153712985,
        16.8317526638244,
        16.89344613545377,
        17.156920944909402,
        15.542696944225593,
        17.165647189898216,
        16.79142879764631,
        16.99407602584789,
        15.035329840583662,
        17.298008077284045,
        16.274824907777507,
        17.161498974492712,
        17.013033586359,
        13.96106857700322,
        16.906071568137946,
        17.229220094494575,
        17.324247707038786,
        17.136314682008248,
        17.13753763323972,
        16.612709667108163,
        16.807132967300284,
        16.778558453207374,
        16.978011370942525,
        13.100279682962327,
        16.760287067600288,
        17.008749910774725,
        17.21886566185933,
        16.58143095026838,
        17.339485605257934,
        14.486265267643333,
        17.243868923747275,
        13.965231872671005,
        17.26807284961,
        16.97636957860883,
        17.081314430162887,
        17.105877710132656,
        16.84434160574626,
        17.189958568056056,
        16.805993874359093,
        16.8805695032575,
        17.211610242549998,
        16.43629525133231,
        17.155483309634597,
        15.13199772235674,
        16.62824806836388,
        14.857299986990052,
        17.04241903537911,
        16.744116033343737,
        16.41624822749315,
        14.26243887701997,
        17.074136553349668,
        16.672317215993008,
        16.893263805327962,
        16.42420572240269,
        16.757310821385687,
        17.103769273690183,
        16.89459390466265,
        17.01645956685531,
        16.719422232121413,
        17.151449988669178,
        16.900300833319736,
        16.69076883805588,
        17.28809534037981,
        16.754413508000965,
        17.104308793437497,
        16.612828734865637,
        16.900141299457623,
        16.6391312226793,
        17.107340657213395,
        17.089047823244083,
        16.724590419651946,
        16.46393866733439,
        17.321202163947223,
        15.813487767836511,
        16.797094807489362,
        16.963478321842267,
        17.064810341495168,
        16.757008929926098,
        16.65536720973002,
        16.869352917812343,
        16.97436057632337,
        16.622057226326298,
        16.891273171408326,
        17.07066160720414,
        16.544030066057203,
        17.032793094264715,
        16.912994034129305,
        17.141840188532274,
        16.99011899510101,
        17.120004207653388,
        16.347099971231728,
        16.992222909352044,
        16.364518012311123,
        16.610166854604763,
        14.708637520933033,
        16.526627668909583,
        17.32013356844476,
        17.180532478594348,
        15.547793156348362,
        17.144041498725002,
        17.241753581308775,
        16.956899051161265,
        17.057464889037107,
        16.429022270236015,
        16.991958586265362,
        17.039656662375105,
        15.390701791995248,
        16.454094068423558,
        16.71984887778577,
        17.105512796207712,
        14.057845718524817,
        17.017179945965065,
        15.60804493249878,
        14.277153007166667,
        17.03857787596209,
        17.37886878151883,
        17.19546353377233,
        16.795133109068068,
        17.12263253458518,
        16.597136534501917,
        17.01202855519201,
        17.207657288209354,
        16.491983482646773,
        17.09281574634499,
        16.571826955219493,
        17.22561419079348,
        16.990088350047365,
        16.95122402738543,
        17.165326954959383,
        17.206268592027268,
        16.163269971087185,
        16.660481923377084,
        16.712269366328478,
        16.411126093164874,
        14.860312000315602,
        17.29503147343265,
        16.47807086702509,
        16.40641429557884,
        17.383199141593817,
        17.337987820202375,
        17.032551295224344,
        16.475874862095967,
        15.793724489756446,
        16.66017350150458,
        16.51142686447066,
        17.161287897560527,
        16.38003477240683,
        15.296467778251994,
        17.307921767206196,
        16.56741414443544,
        16.636337718528587,
        17.231137978873,
        17.19155923777967,
        16.792077535991666,
        16.87787769106422,
        17.372787091325524,
        17.288561211533498,
        17.105693799248478,
        16.668231155666128,
        17.169081638125856,
        14.159432439885103,
        17.361250773358222,
        17.255655722557798,
        17.25993916765181,
        17.363251253957493,
        17.2730760717391,
        16.96062660802835,
        17.08512904568409,
        17.3102682168863,
        16.024701315353695,
        17.255079863682376,
        17.25436960173019,
        17.34550256637912,
        16.698421202393032,
        17.35051421743254,
        17.274696412559134,
        17.193269986322242,
        17.14131601211877,
        17.240933903357508,
        17.36379545931206,
        17.001411691837372,
        17.225180821684507,
        16.35910321787454,
        17.34600973183101,
        17.18098893490146,
        16.837761545359154,
    ],
    "magap": [
        16.999210731347183,
        17.100506738979092,
        16.25159341168322,
        16.704145608322463,
        16.623647691100352,
        15.98980930450428,
        16.87015054985482,
        16.02597923345043,
        16.275233646951982,
        16.74383538596543,
        17.647757293256454,
        17.09282347300866,
        16.744496325658893,
        15.518405450926448,
        14.309880578392391,
        16.26954128521023,
        14.952411884625167,
        16.966855980892113,
        16.88418495250187,
        16.65862012697983,
        16.39227583759153,
        16.72395009834748,
        16.70002860077116,
        16.591802143051545,
        16.72826703519212,
        15.75867416567782,
        17.005281640018126,
        17.22746035015709,
        16.678239127573978,
        15.836790848315239,
        17.12090037510687,
        16.465734773962037,
        16.935769537336146,
        16.259178856872225,
        14.484965766820771,
        16.760572075770355,
        16.982127026000374,
        17.740498463341915,
        16.605728759755106,
        17.147616902084096,
        17.175760452331538,
        16.54181036912889,
        15.912919124181482,
        17.380202483331704,
        12.460595564712591,
        16.48649676072447,
        16.742543966226886,
        17.20630971328091,
        16.40313452206932,
        16.929882768590964,
        14.994085531851145,
        17.07864666765043,
        14.02502197092328,
        17.971362389118152,
        17.160275837363063,
        16.99415140475904,
        16.523178250853473,
        15.959588041542268,
        17.260628788146256,
        16.16745653703493,
        17.161032491379316,
        17.66528236019196,
        16.243587348509966,
        16.86861084953622,
        15.580812147424217,
        16.053404932964376,
        15.34452757018662,
        16.148079216837182,
        17.18431781226372,
        16.320687998422603,
        14.266836765828932,
        16.758444646216955,
        16.77467801195104,
        17.05608223434902,
        15.73395530811009,
        17.015459439925706,
        17.29014266066559,
        16.31469165065115,
        16.799784945061383,
        16.774291503329813,
        16.37974871580147,
        16.31531176049583,
        17.1030415887711,
        17.16785642006961,
        16.318416329812617,
        16.851157903369177,
        15.867077544746225,
        17.519553472751983,
        15.894054604738814,
        16.659287123346694,
        16.68566096707504,
        16.214984541409052,
        16.53832577456164,
        16.71266722711639,
        16.541180580849627,
        16.052911061331667,
        16.65635938418327,
        16.536996244443742,
        16.93993244166624,
        16.176178937268993,
        17.538415418061113,
        16.232060365924923,
        15.902185515336996,
        16.324738148695005,
        16.380296763947307,
        16.04756348230723,
        16.572541913219872,
        16.325487478985714,
        17.011510218099474,
        16.572837583899048,
        16.64579057973391,
        15.922008941550265,
        16.388625323762714,
        15.851447557808802,
        16.830973717564035,
        15.419639475303454,
        16.72251375531153,
        16.62748273774924,
        17.078327379173224,
        16.27655154551509,
        16.70933773621512,
        16.64293859531479,
        16.173140640747565,
        16.961359265955828,
        16.360084218261,
        16.87991959142907,
        17.055124614969863,
        15.50104065405109,
        16.417805908956474,
        16.133873475515863,
        16.814569636007427,
        14.660498536518183,
        16.68800963918249,
        16.55849295650539,
        14.963221579014888,
        16.276458637004538,
        17.40730620250493,
        16.60752643771458,
        16.811186219187135,
        16.9684906789078,
        16.636508843186654,
        16.718545171763967,
        16.60223979607211,
        16.054318908101873,
        16.989437707314657,
        15.596521215384879,
        17.050769808745972,
        17.319690338292,
        17.151261459304543,
        17.319593645365984,
        16.886833407451306,
        16.95215363482017,
        16.027636203153644,
        15.980220552026504,
        15.881684491203925,
        15.4743924213499,
        16.564531629235148,
        16.299262248524634,
        16.21685541608992,
        17.381478605460394,
        16.495106361874978,
        16.413861981051333,
        16.457837261445725,
        16.392955897668347,
        15.958172956999954,
        15.964388058558105,
        16.682171529008603,
        15.649098487634674,
        15.468182632024932,
        17.756744586061753,
        16.407591849927833,
        16.59901640276672,
        16.722100413076603,
        16.49235350681755,
        16.592921876788324,
        16.9284738181111,
        17.02564344673953,
        16.920589465939837,
        17.02808439026945,
        16.041164546651622,
        16.983571765174375,
        14.59474753733716,
        16.817341868704467,
        17.228777534324674,
        16.794731461993205,
        17.028336026747013,
        17.14393185333722,
        16.29607018205465,
        16.336907648946937,
        17.739993248742056,
        16.567650122625132,
        17.116521421572653,
        17.199100668947292,
        17.030353348948786,
        16.61400766974273,
        16.664344870750213,
        16.83790778817827,
        16.540652799157126,
        16.807553642466875,
        17.18683244338872,
        16.628219705657465,
        16.923964861822743,
        17.07671419930161,
        16.287319608443802,
        17.565652285258874,
        17.095585391781697,
        16.138942839551547,
    ],
}

pipeline = get_pipeline(
    instrument="winter", selected_configurations=["test"], night="20230726"
)

logging.basicConfig(level=logging.DEBUG)


# @unittest.skip(
#     "WFAU is down"
# )
class TestWinterPipeline(BaseTestCase):
    """
    Module for testing winter pipeline
    """

    def setUp(self):
        """
        Function to set up test
        Returns:

        """
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

    def test_pipeline(self):
        """
        Test winter pipeline
        Returns:

        """
        self.logger.info("\n\n Testing winter pipeline \n\n")

        res, _ = pipeline.reduce_images(Dataset([ImageBatch()]), catch_all_errors=False)

        # Cleanup - delete ouptut dir
        output_dir = get_output_dir(dir_root="winter/20230726")
        shutil.rmtree(output_dir)

        # Expect one dataset, for one different sub-boards
        self.assertEqual(len(res[0]), 1)

        source_table = res[0][0]

        # # Uncomment to print new expected ZP dict
        print("New Results WINTER:")
        new_exp = "expected_zp = { \n"
        for header_key in source_table.get_metadata():
            if header_key in expected_zp:
                new_exp += f'    "{header_key}": {source_table[header_key]}, \n'
        new_exp += "}"
        print(new_exp)

        new_candidates_table = source_table.get_data()

        new_exp_dataframe = "expected_dataframe_values = { \n"
        for key in expected_dataframe_values:
            new_exp_dataframe += f'    "{key}": {list(new_candidates_table[key])}, \n'
        new_exp_dataframe += "}"

        print(new_exp_dataframe)

        for key, value in expected_zp.items():
            if isinstance(value, float):
                self.assertAlmostEqual(value, source_table[key], places=2)
            elif isinstance(value, int):
                self.assertEqual(value, source_table[key])
            else:
                raise TypeError(
                    f"Type for value ({type(value)} is neither float not int."
                )

        candidates_table = source_table.get_data()

        self.assertEqual(len(candidates_table), 207)
        for key, value in expected_dataframe_values.items():
            if isinstance(value, list):
                for ind, val in enumerate(value):
                    self.assertAlmostEqual(
                        candidates_table.iloc[ind][key], val, delta=0.05
                    )
