"""
Tests for WINTER reduction
"""
import logging

from mirar.data import Dataset, ImageBatch
from mirar.pipelines import get_pipeline
from mirar.testing import BaseTestCase

logger = logging.getLogger(__name__)

expected_zp = {
    "ZP_2.0": 23.97239112854004,
    "ZP_2.0_std": 0.04485376924276352,
    "ZP_2.0_nstars": 20,
    "ZP_3.0": 24.469276428222656,
    "ZP_3.0_std": 0.06575325131416321,
    "ZP_3.0_nstars": 24,
    "ZP_4.0": 24.69712257385254,
    "ZP_4.0_std": 0.05887956544756889,
    "ZP_4.0_nstars": 21,
    "ZP_5.0": 24.742101669311523,
    "ZP_5.0_std": 0.06479335576295853,
    "ZP_5.0_nstars": 22,
    "ZP_6.0": 24.743587493896484,
    "ZP_6.0_std": 0.06024789810180664,
    "ZP_6.0_nstars": 21,
    "ZP_7.0": 24.753494262695312,
    "ZP_7.0_std": 0.06898591667413712,
    "ZP_7.0_nstars": 24,
    "ZP_8.0": 24.76802635192871,
    "ZP_8.0_std": 0.06132316589355469,
    "ZP_8.0_nstars": 21,
    "ZP_AUTO": 24.73688507080078,
    "ZP_AUTO_std": 0.04644254967570305,
    "ZP_AUTO_nstars": 18,
    "SCORMEAN": -0.12958823890710153,
    "SCORMED": -0.1301039138898356,
    "SCORSTD": 1.3122340990145394,
}
expected_dataframe_values = {
    "magpsf": [
        15.37691920597621,
        16.72599528409608,
        16.587977862093272,
        16.576158311836437,
        16.73154118790503,
        17.06119435126739,
        16.489097765207436,
        15.39405500809074,
        17.02563643907215,
        16.975421840986392,
        16.65156948549597,
        17.15086161983043,
        16.745616960057795,
        15.059247410175278,
        17.1166541574444,
        16.834376636209075,
        17.155154476581274,
        16.785938859019346,
        16.51427461252723,
        16.531039433796224,
        16.811511320187172,
        16.12198588650654,
        17.150718921512777,
        15.155706357264858,
        17.09362464092853,
        15.155418643246314,
        16.7295180925082,
        16.553731919559574,
        16.589294331594086,
        17.228020346932894,
        17.165587846988107,
        16.927260183294944,
        15.110412528785783,
        17.042963394147748,
        17.158914014548568,
        16.322618637321746,
        17.20808763575036,
        17.199652822882914,
        17.28883505409576,
        15.007343751358489,
        17.106132820545334,
        16.675296440588205,
        16.497661917436826,
        16.77740916467284,
        16.670787690206094,
        16.9578522787377,
        15.611471164771197,
        16.785063424736848,
        17.06414399134229,
        16.74998567552661,
        13.26237878671634,
        16.623231362859414,
        16.658765111903634,
        16.222026685076408,
        16.38576457676194,
        16.386300801092084,
        16.384689583920597,
        16.293105857030078,
        16.482603428771647,
        13.622493046129854,
        17.44807547175357,
        13.431081978913312,
        16.98942669379815,
        16.783816039869585,
        14.19100065137404,
        16.913693944724177,
        17.029626349147012,
        16.671695515190354,
        15.077739560346444,
        17.105761235753796,
        17.017439319497512,
        16.9737993327514,
        17.356914553998838,
        16.837549876647067,
        16.576676869769088,
        17.496445430155312,
        17.551086470234523,
        14.496776714473015,
        17.21332172715366,
        17.238020162814188,
        15.618755591280546,
        15.618182848909694,
        15.775833098606732,
        16.98088821517356,
        18.147437275570173,
        14.71775758106989,
        16.085305545934048,
        16.389987004316104,
        16.846399953920713,
        15.879276710186033,
        16.150315144728925,
        16.443033100033038,
        13.423360606269949,
        14.91871366279934,
        17.29266977108519,
        16.799839263975663,
        12.173628210102606,
        15.838153950615663,
        16.19556525215493,
        16.978336339135968,
        13.322871967207432,
        14.45330181624294,
        17.224488533654956,
        14.908275110524729,
        14.30188471415726,
        16.035358197340184,
        13.38971950914009,
        14.768309178188867,
        13.106824773090572,
        13.529126578435832,
        14.192595016855,
        14.773852061322355,
        17.1640213985173,
        17.98297015064517,
        16.86515494584279,
        16.676904210631296,
    ],
    "magap": [
        15.631678216134478,
        15.55330829700968,
        14.627074085913373,
        14.710904413194369,
        15.214348722174563,
        14.863163623269942,
        15.048319375607209,
        15.307762692316649,
        14.928360079991338,
        14.319454533571866,
        15.096301665601686,
        14.154706217757017,
        14.232880136344855,
        14.483297254446544,
        14.600761584996189,
        15.48592314216136,
        14.425471833808803,
        15.151129080902269,
        14.663168322820411,
        15.175260134222047,
        14.978736858207224,
        15.23638688987956,
        16.307100776253662,
        14.68016809793271,
        15.976088715376859,
        14.503775179200003,
        15.258492896856609,
        14.486271448123883,
        14.647070598517772,
        14.895329381249606,
        16.15246178660626,
        15.716891683165734,
        16.201800956935582,
        15.739468002274895,
        15.260502732279827,
        15.386090693893241,
        14.7781366100071,
        14.27738342274734,
        14.872130997261234,
        14.626537413715484,
        14.214726524550633,
        14.794042358789387,
        15.316907838320947,
        14.303659060754885,
        11.485087486271766,
        15.653833941973401,
        17.94287062252925,
        14.808650991839862,
        14.797906115953896,
        16.9460591793618,
        14.151351120089942,
        14.269621755194013,
        13.54116470193065,
        15.018418515878007,
        13.214586100975291,
        13.096469907842037,
        12.828893760108995,
        14.497137506628144,
        14.744212073733708,
        13.792220578020515,
        12.837468436023917,
        14.092742262243554,
        14.381061963573648,
        14.971751599183051,
        13.95227120504512,
        14.894070826078003,
        14.152697627320723,
        14.674197172939294,
        15.675447199344628,
        14.63587060371481,
        14.341790378897493,
        15.21341040820802,
        17.490508390955167,
        15.322935264085064,
        13.994762109775934,
        16.67441410929325,
        14.616994447106203,
        15.13059713680026,
        15.650412247151383,
        15.721287002796746,
        14.944221301597864,
        16.545872286749308,
        17.864328436290094,
        16.116344435553053,
        16.38729582500389,
        16.986981380146645,
        16.076836298918238,
        12.821822515323262,
        13.938415637720407,
        15.528452305337389,
        13.321173000411093,
        13.145333556379317,
        16.01533818407105,
        14.290127870525813,
        16.549760404411096,
        15.829869661631687,
        11.974951516927666,
        17.013279991586117,
        15.038953451775624,
        13.530033961743165,
        14.643142758189727,
        14.850122962164118,
        14.887708271986618,
        15.808081104153775,
        14.880936147103796,
        15.115758730740254,
        14.069111251555077,
        15.489172381774008,
        14.9734009670225,
        15.51656547995328,
        14.1158569684762,
        14.678326280286894,
        14.33754851377192,
        13.388295910338037,
        14.289649677245663,
        14.840235912024582,
    ],
}
pipeline = get_pipeline(
    instrument="winter", selected_configurations=["test"], night="20230726"
)

logging.basicConfig(level=logging.DEBUG)


class TestWinterPipeline(BaseTestCase):
    """
    Module for testing winter pipeline
    """

    def setUp(self):
        """
        Function to set up test
        Returns:

        """
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

    def test_pipeline(self):
        """
        Test winter pipeline
        Returns:

        """
        self.logger.info("\n\n Testing winter pipeline \n\n")

        res, _ = pipeline.reduce_images(Dataset([ImageBatch()]), catch_all_errors=False)

        # Expect one dataset, for one different sub-boards
        self.assertEqual(len(res[0]), 1)

        source_table = res[0][0]

        # # Uncomment to print new expected ZP dict
        print("New Results WINTER:")
        new_exp = "expected_zp = { \n"
        for header_key in source_table.get_metadata():
            if header_key in expected_zp:
                new_exp += f'    "{header_key}": {source_table[header_key]}, \n'
        new_exp += "}"
        print(new_exp)

        new_candidates_table = source_table.get_data()

        new_exp_dataframe = "expected_dataframe_values = { \n"
        for key in expected_dataframe_values:
            new_exp_dataframe += f'    "{key}": {list(new_candidates_table[key])}, \n'
        new_exp_dataframe += "}"

        print(new_exp_dataframe)

        for key, value in expected_zp.items():
            if isinstance(value, float):
                self.assertAlmostEqual(value, source_table[key], places=2)
            elif isinstance(value, int):
                self.assertEqual(value, source_table[key])
            else:
                raise TypeError(
                    f"Type for value ({type(value)} is neither float not int."
                )

        candidates_table = source_table.get_data()

        self.assertEqual(len(candidates_table), 116)
        for key, value in expected_dataframe_values.items():
            if isinstance(value, list):
                for ind, val in enumerate(value):
                    self.assertAlmostEqual(
                        candidates_table.iloc[ind][key], val, delta=0.05
                    )
