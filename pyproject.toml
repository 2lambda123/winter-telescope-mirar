[tool.poetry]
name = "winterdrp"
version = "0.7.1"
description = "Modular open-source astronomy image reduction framework"
authors = ["Robert Stein <rdstein@caltech.edu>", "Viraj Karambelkar <viraj@astro.caltech.edu>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10.0,<3.12"
astroplan = "^0.8"
astropy = {extras = ["all"], version = "^5.2.2"}
astroquery = "^0.4.6"
avro-python3 = "~1.10.1"
coveralls = {extras = ["toml"], version = "^3.3.1"}
confluent-kafka = "^2.1.1"
docker = "^6.0.1"
ephem = "^4.1.3"
fastavro = "^1.7.4"
jupyter = "^1.0.0"
matplotlib = "^3.7.1"
mocpy = "^0.12.0"
lacosmic = "^1.0.0"
numpy = "~1.24.3"
pandas = "^2.0.1"
penquins = "^2.2.0"
photutils = "^1.6.0"
psycopg = {extras = ["binary"], version = "^3.1.9"}
pydl = {version = "^1.0.0rc1", allow-prereleases = true}
pyFFTW = "^0.13.1"
setuptools = "^67.6.1"
watchdog = "^3.0.0"
wget = "^3.2"
toml = "^0.10.2"
sphinx-mdinclude = "^0.5.3"
black = "^23.1.0"
pre-commit = "^3.3.1"
isort = {extras = ["pyproject"], version = "^5.12.0"}
pylint = "^2.17.1"
mypy = "^1.1"
types-requests = "^2.30.0.0"
types-toml = "^0.10.8.6"
pandas-stubs = "^2.0.1.230501"
autopep8 = "^2.0.2"
sqlalchemy = "^2.0.12"
pydantic = "^1.10.5"
pylint-pydantic = "^0.1.6"
survey-coverage = {git = "https://github.com/virajkaram/survey_coverage.git"}

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0.1"

[tool.coverage.run]
source = ["winterdrp"]
concurrency = ["thread"]
omit = ["winterdrp/__main__.py", "winterdrp/processors/send_to_fritz.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise KeyError",
    "except KeyError",
    "raise ValueError",
    "except JSONDecodeError:",
    "raise requests.exceptions.RequestException",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    'if __name__ == "__main__":',
    "err =",
    "logger.error",
    "raise"
    ]
ignore_errors = true

[tool.isort]
profile = "black"

[tool.pylint.MASTER]
load-plugins = "pylint_pydantic"

[tool.pylint.format]
max-line-length = "88"
disable=["logging-fstring-interpolation"]
good-names=["i", "j", "k", "ex", "Run", "_", "ra", "pa", "x", "y", "nx", "ny", "dx", "dy"]
exclude-too-few-public-methods=["pydantic.*"]
extension-pkg-whitelist=["pydantic"]

[build-system]
requires = ["setuptools", "wheel", "poetry-core>=1.2.0",]
build-backend = "poetry.core.masonry.api"
